#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// structura masina
struct StructuraMasina {
    int id;
    int nrUsi;
    float pret;
    char* model;
    char* numeSofer;
    unsigned char serie;
};
typedef struct StructuraMasina Masina;

// nod arbore AVL
typedef struct nod {
    Masina info;
    struct nod* stanga;
    struct nod* dreapta;
} nod;

// functie citire masina din fisier
Masina citireMasinaDinFisier(FILE* file) {
    char buffer[256];
    char sep[3] = ",\n";
    if (!fgets(buffer, 256, file)) {
        Masina m = { 0, 0, 0, NULL, NULL, 0 };
        return m;
    }

    char* aux;
    Masina m1;

    aux = strtok(buffer, sep);
    m1.id = atoi(aux);

    aux = strtok(NULL, sep);
    m1.nrUsi = atoi(aux);

    aux = strtok(NULL, sep);
    m1.pret = atof(aux);

    aux = strtok(NULL, sep);
    m1.model = malloc(strlen(aux) + 1);
    strcpy(m1.model, aux);

    aux = strtok(NULL, sep);
    m1.numeSofer = malloc(strlen(aux) + 1);
    strcpy(m1.numeSofer, aux);

    aux = strtok(NULL, sep);
    m1.serie = aux[0];

    return m1;
}

void afisareMasina(Masina masina) {
    printf("Id: %d\n", masina.id);
    printf("Nr. usi : %d\n", masina.nrUsi);
    printf("Pret: %.2f\n", masina.pret);
    printf("Model: %s\n", masina.model);
    printf("Nume sofer: %s\n", masina.numeSofer);
    printf("Serie: %c\n\n", masina.serie);
}

int calculeazaInaltimeArbore(nod* arbore) {
    if (arbore != NULL) {
        int inaltimeStanga = calculeazaInaltimeArbore(arbore->stanga);
        int inaltimeDreapta = calculeazaInaltimeArbore(arbore->dreapta);
        return (inaltimeStanga > inaltimeDreapta ? inaltimeStanga : inaltimeDreapta) + 1;
    }
    return 0;
}

int calculeazaGE(nod* arbore) {
    return calculeazaInaltimeArbore(arbore->stanga) - calculeazaInaltimeArbore(arbore->dreapta);
}

void rotireStanga(nod** arbore) {
    nod* aux = (*arbore)->dreapta;
    (*arbore)->dreapta = aux->stanga;
    aux->stanga = *arbore;
    *arbore = aux;
}

void rotireDreapta(nod** arbore) {
    nod* aux = (*arbore)->stanga;
    (*arbore)->stanga = aux->dreapta;
    aux->dreapta = *arbore;
    *arbore = aux;
}

void adaugaMasinaInArboreEchilibrat(nod** arbore, Masina masinaNoua) {
    if (*arbore != NULL) {
        if (masinaNoua.id < (*arbore)->info.id) {
            adaugaMasinaInArboreEchilibrat(&((*arbore)->stanga), masinaNoua);
        }
        else {
            adaugaMasinaInArboreEchilibrat(&((*arbore)->dreapta), masinaNoua);
        }

        int ge = calculeazaGE(*arbore);
        if (ge == 2) {
            if (calculeazaGE((*arbore)->stanga) >= 0) {
                rotireDreapta(arbore);
            }
            else {
                rotireStanga(&((*arbore)->stanga));
                rotireDreapta(arbore);
            }
        }
        else if (ge == -2) {
            if (calculeazaGE((*arbore)->dreapta) <= 0) {
                rotireStanga(arbore);
            }
            else {
                rotireDreapta(&((*arbore)->dreapta));
                rotireStanga(arbore);
            }
        }
    }
    else {
        *arbore = (nod*)malloc(sizeof(nod));
        (*arbore)->info = masinaNoua;
        (*arbore)->stanga = NULL;
        (*arbore)->dreapta = NULL;
    }
}

nod* citireArboreDeMasiniDinFisier(const char* numeFisier) {
    FILE* f = fopen(numeFisier, "r");
    if (!f) {
        printf("Eroare la deschiderea fisierului.\n");
        return NULL;
    }

    nod* radacina = NULL;
    while (!feof(f)) {
        Masina m = citireMasinaDinFisier(f);
        if (m.model != NULL)  // verificam ca citirea a fost valida
            adaugaMasinaInArboreEchilibrat(&radacina, m);
    }

    fclose(f);
    return radacina;
}

void afisarePreOrdineRSD(nod* radacina) {
    if (radacina != NULL) {
        afisareMasina(radacina->info);
        afisarePreOrdineRSD(radacina->stanga);
        afisarePreOrdineRSD(radacina->dreapta);
    }
}

void afisareInOrdineSRD(nod* radacina) {
    if (radacina != NULL) {
        afisareInOrdineSRD(radacina->stanga);
        afisareMasina(radacina->info);
        afisareInOrdineSRD(radacina->dreapta);
    }
}

void afisarePostOrdineSDR(nod* radacina) {
    if (radacina != NULL) {
        afisarePostOrdineSDR(radacina->stanga);
        afisarePostOrdineSDR(radacina->dreapta);
        afisareMasina(radacina->info);
    }
}

void afisareMasiniDinArbore(nod* radacina) {
    printf("Parcurgere Preordine:\n");
    afisarePreOrdineRSD(radacina);
    printf("\nParcurgere Inordine:\n");
    afisareInOrdineSRD(radacina);
    printf("\nParcurgere Postordine:\n");
    afisarePostOrdineSDR(radacina);
}

void dezalocareArboreDeMasini(nod* radacina) {
    if (radacina != NULL) {
        dezalocareArboreDeMasini(radacina->stanga);
        dezalocareArboreDeMasini(radacina->dreapta);
        free(radacina->info.model);
        free(radacina->info.numeSofer);
        free(radacina);
    }
}

float calculeazaPretTotal(nod* radacina) {
    if (radacina == NULL) return 0;
    return radacina->info.pret +
        calculeazaPretTotal(radacina->stanga) +
        calculeazaPretTotal(radacina->dreapta);
}

int main() {
    nod* radacina = citireArboreDeMasiniDinFisier("..\\masiniArbore.txt");


    if (radacina != NULL) {
        afisareMasiniDinArbore(radacina);
        float pretTotal = calculeazaPretTotal(radacina);
        printf("\nPret total masini: %.2f\n", pretTotal);
        dezalocareArboreDeMasini(radacina);
    }

    return 0;
}
